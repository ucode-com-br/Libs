using System;
using MongoDB.Bson.Serialization.Attributes;
using System.Text.Json.Serialization;
using MongoDB.Bson;

namespace UCode.Mongo.Models
{
    /// <summary>
    /// Represents the base class for object classes within the tenant context.
    /// All object classes that derive from this class must implement 
    /// the functionality defined in the <see cref="IObjectBaseTenant"/> interface.
    /// </summary>
    /// <remarks>
    /// This is an abstract class and cannot be instantiated directly.
    /// Classes derived from <see cref="ObjectClassBase"/> 
    /// are expected to provide specific implementations of the methods 
    /// and properties defined in <see cref="IObjectBaseTenant"/>.
    /// </remarks>
    public abstract class ObjectClassBase : IObjectBaseTenant
    {

        /// <summary>
        /// Represents a reference identifier of type Guid, 
        /// which is serialized using JSON and BSON.
        /// </summary>
        /// <returns>
        /// A new Guid value is generated by default when the property is instantiated.
        /// </returns>
        [JsonPropertyName("ref")]
        [BsonElement("ref")]
        [BsonRepresentation(BsonType.String)]
        public Guid Ref
        {
            get;
            set;
        } = Guid.NewGuid();


        /// <summary>
        /// Represents the tenant associated with the entity.
        /// </summary>
        /// <remarks>
        /// This property is mapped to a JSON property named "tenant" and a BSON element also named "tenant".
        /// It is represented as a string in the BSON format.
        /// The property is initialized with a new GUID by default.
        /// </remarks>
        /// <value>
        /// A <see cref="Guid"/> that uniquely identifies the tenant.
        /// </value>
        [JsonPropertyName("tenant")]
        [BsonElement("tenant")]
        [BsonRepresentation(BsonType.String)]
        public Guid Tenant
        {
            get;
            set;
        } = Guid.NewGuid();

    }


}
